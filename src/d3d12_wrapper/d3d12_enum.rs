#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use crate::raw_bindings::d3d12::*;
use bitflags::bitflags;
use crate::d3d12_common::ByteCount;

bitflags! {
    pub struct FenceFlags: i32 {
        const None = D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_NONE;
        const Shared =
        D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_SHARED;
        const CrossAdapter =
        D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER;
        const NonMonitored =
        D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_NON_MONITORED;
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum Filter {
    MinMagMipPoint = D3D12_FILTER_D3D12_FILTER_MIN_MAG_MIP_POINT,
    MinMagPointMipLinear = D3D12_FILTER_D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR,
    MinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
    MinPointMagMipLinear = D3D12_FILTER_D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR,
    MinLinearMagMipPoint = D3D12_FILTER_D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
    MinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    MinMagLinearMipPoint = D3D12_FILTER_D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
    MinMagMipLinear = D3D12_FILTER_D3D12_FILTER_MIN_MAG_MIP_LINEAR,
    Anisotropic = D3D12_FILTER_D3D12_FILTER_ANISOTROPIC,
    ComparisonMinMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
    ComparisonMinMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
    ComparisonMinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
    ComparisonMinPointMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
    ComparisonMinLinearMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
    ComparisonMinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    ComparisonMinMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
    ComparisonMinMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
    ComparisonAnisotropic = D3D12_FILTER_D3D12_FILTER_COMPARISON_ANISOTROPIC,
    MinimumMinMagMipPoint = D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT,
    MinimumMinMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR,
    MinimumMinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
    MinimumMinPointMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR,
    MinimumMinLinearMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT,
    MinimumMinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    MinimumMinMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT,
    MinimumMinMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR,
    MinimumAnisotropic = D3D12_FILTER_D3D12_FILTER_MINIMUM_ANISOTROPIC,
    MaximumMinMagMipPoint = D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT,
    MaximumMinMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,
    MaximumMinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
    MaximumMinPointMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,
    MaximumMinLinearMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,
    MaximumMinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    MaximumMinMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,
    MaximumMinMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR,
    MaximumAnisotropic = D3D12_FILTER_D3D12_FILTER_MAXIMUM_ANISOTROPIC,
}


#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum TextureAddressMode {
    Wrap = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_WRAP,
    Mirror = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_MIRROR,
    Clamp = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_CLAMP,
    Border = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_BORDER,
    MirrorOnce =
        D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum ComparisonFunc {
    Never = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_NEVER,
    Less = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_LESS,
    Equal = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_EQUAL,
    LessEqual = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_LESS_EQUAL,
    Greater = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_GREATER,
    NotEqual = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_NOT_EQUAL,
    GreaterEqual = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_GREATER_EQUAL,
    Always = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_ALWAYS,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum StaticBorderColor {
    TransparentBlack =
        D3D12_STATIC_BORDER_COLOR_D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK,
    OpaqueBlack =
        D3D12_STATIC_BORDER_COLOR_D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK,
    OpaqueWhite =
        D3D12_STATIC_BORDER_COLOR_D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum ShaderVisibility {
    All = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_ALL,
    Vertex = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_VERTEX,
    Hull = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_HULL,
    Domain = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_DOMAIN,
    Geometry = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_GEOMETRY,
    Pixel = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_PIXEL,
    Amplification =
        D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_AMPLIFICATION,
    Mesh = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_MESH,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum InputClassification {
    PerVertex =
        D3D12_INPUT_CLASSIFICATION_D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA,
    PerInstance =
        D3D12_INPUT_CLASSIFICATION_D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA,
}


#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum RootParameterType {
    DescriptorTable =
        D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE,
    T32BitConstants =
        D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS,
    Cbv = D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_CBV,
    Srv = D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_SRV,
    Uav = D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_UAV,
}

bitflags! {
    pub struct RootDescriptorFlags: i32 {
        const DataVolatile = D3D12_ROOT_DESCRIPTOR_FLAGS_D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE;
        const DataStaticWhileSetAtExecute = D3D12_ROOT_DESCRIPTOR_FLAGS_D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE;
        const DataStatic = D3D12_ROOT_DESCRIPTOR_FLAGS_D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC;
    }
}

bitflags! {
    pub struct RootSignatureFlags: i32 {
        const None = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_NONE;
        const AllowInputAssemblerInputLayout = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;
        const DenyVertexShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS;
        const DenyHullShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS;
        const DenyDomainShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS;
        const DenyGeometryShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS;
        const DenyPixelShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS;
        const AllowStreamOutput = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT;
        const LocalRootSignature = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE;
        const DenyAmplificationShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS;
        const DenyMeshShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS;
        const CbvSrvUavHeapDirectlyIndexed = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED;
        const SamplerHeapDirectlyIndexed = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED;
    }
}

#[repr(i32)]
#[derive(Debug, Copy, Clone)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum Format {
    Unknown = DXGI_FORMAT_DXGI_FORMAT_UNKNOWN,
    R32G32B32A32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_TYPELESS,
    R32G32B32A32Float = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_FLOAT,
    R32G32B32A32Uint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_UINT,
    R32G32B32A32Sint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_SINT,
    R32G32B32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_TYPELESS,
    R32G32B32Float = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_FLOAT,
    R32G32B32Uint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_UINT,
    R32G32B32Sint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_SINT,
    R16G16B16A16Typeless = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_TYPELESS,
    R16G16B16A16Float = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_FLOAT,
    R16G16B16A16Unorm = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_UNORM,
    R16G16B16A16Uint = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_UINT,
    R16G16B16A16Snorm = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_SNORM,
    R16G16B16A16Sint = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_SINT,
    R32G32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G32_TYPELESS,
    R32G32Float = DXGI_FORMAT_DXGI_FORMAT_R32G32_FLOAT,
    R32G32Uint = DXGI_FORMAT_DXGI_FORMAT_R32G32_UINT,
    R32G32Sint = DXGI_FORMAT_DXGI_FORMAT_R32G32_SINT,
    R32G8X24Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G8X24_TYPELESS,
    D32FloatS8X24Uint = DXGI_FORMAT_DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
    R32FloatX8X24Typeless = DXGI_FORMAT_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
    X32TypelessG8X24Uint = DXGI_FORMAT_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
    R10G10B10A2Typeless = DXGI_FORMAT_DXGI_FORMAT_R10G10B10A2_TYPELESS,
    R10G10B10A2Unorm = DXGI_FORMAT_DXGI_FORMAT_R10G10B10A2_UNORM,
    R10G10B10A2Uint = DXGI_FORMAT_DXGI_FORMAT_R10G10B10A2_UINT,
    R11G11B10Float = DXGI_FORMAT_DXGI_FORMAT_R11G11B10_FLOAT,
    R8G8B8A8Typeless = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_TYPELESS,
    R8G8B8A8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_UNORM,
    R8G8B8A8UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
    R8G8B8A8Uint = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_UINT,
    R8G8B8A8Snorm = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_SNORM,
    R8G8B8A8Sint = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_SINT,
    R16G16Typeless = DXGI_FORMAT_DXGI_FORMAT_R16G16_TYPELESS,
    R16G16Float = DXGI_FORMAT_DXGI_FORMAT_R16G16_FLOAT,
    R16G16Unorm = DXGI_FORMAT_DXGI_FORMAT_R16G16_UNORM,
    R16G16Uint = DXGI_FORMAT_DXGI_FORMAT_R16G16_UINT,
    R16G16Snorm = DXGI_FORMAT_DXGI_FORMAT_R16G16_SNORM,
    R16G16Sint = DXGI_FORMAT_DXGI_FORMAT_R16G16_SINT,
    R32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32_TYPELESS,
    D32Float = DXGI_FORMAT_DXGI_FORMAT_D32_FLOAT,
    R32Float = DXGI_FORMAT_DXGI_FORMAT_R32_FLOAT,
    R32Uint = DXGI_FORMAT_DXGI_FORMAT_R32_UINT,
    R32Sint = DXGI_FORMAT_DXGI_FORMAT_R32_SINT,
    R24G8Typeless = DXGI_FORMAT_DXGI_FORMAT_R24G8_TYPELESS,
    D24UnormS8Uint = DXGI_FORMAT_DXGI_FORMAT_D24_UNORM_S8_UINT,
    R24UnormX8Typeless = DXGI_FORMAT_DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
    X24TypelessG8Uint = DXGI_FORMAT_DXGI_FORMAT_X24_TYPELESS_G8_UINT,
    R8G8Typeless = DXGI_FORMAT_DXGI_FORMAT_R8G8_TYPELESS,
    R8G8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8G8_UNORM,
    R8G8Uint = DXGI_FORMAT_DXGI_FORMAT_R8G8_UINT,
    R8G8Snorm = DXGI_FORMAT_DXGI_FORMAT_R8G8_SNORM,
    R8G8Sint = DXGI_FORMAT_DXGI_FORMAT_R8G8_SINT,
    R16Typeless = DXGI_FORMAT_DXGI_FORMAT_R16_TYPELESS,
    R16Float = DXGI_FORMAT_DXGI_FORMAT_R16_FLOAT,
    D16Unorm = DXGI_FORMAT_DXGI_FORMAT_D16_UNORM,
    R16Unorm = DXGI_FORMAT_DXGI_FORMAT_R16_UNORM,
    R16Uint = DXGI_FORMAT_DXGI_FORMAT_R16_UINT,
    R16Snorm = DXGI_FORMAT_DXGI_FORMAT_R16_SNORM,
    R16Sint = DXGI_FORMAT_DXGI_FORMAT_R16_SINT,
    R8Typeless = DXGI_FORMAT_DXGI_FORMAT_R8_TYPELESS,
    R8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8_UNORM,
    R8Uint = DXGI_FORMAT_DXGI_FORMAT_R8_UINT,
    R8Snorm = DXGI_FORMAT_DXGI_FORMAT_R8_SNORM,
    R8Sint = DXGI_FORMAT_DXGI_FORMAT_R8_SINT,
    A8Unorm = DXGI_FORMAT_DXGI_FORMAT_A8_UNORM,
    R1Unorm = DXGI_FORMAT_DXGI_FORMAT_R1_UNORM,
    R9G9B9E5Sharedexp = DXGI_FORMAT_DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
    R8G8B8G8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8G8_B8G8_UNORM,
    G8R8G8B8Unorm = DXGI_FORMAT_DXGI_FORMAT_G8R8_G8B8_UNORM,
    Bc1Typeless = DXGI_FORMAT_DXGI_FORMAT_BC1_TYPELESS,
    Bc1Unorm = DXGI_FORMAT_DXGI_FORMAT_BC1_UNORM,
    Bc1UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC1_UNORM_SRGB,
    Bc2Typeless = DXGI_FORMAT_DXGI_FORMAT_BC2_TYPELESS,
    Bc2Unorm = DXGI_FORMAT_DXGI_FORMAT_BC2_UNORM,
    Bc2UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC2_UNORM_SRGB,
    Bc3Typeless = DXGI_FORMAT_DXGI_FORMAT_BC3_TYPELESS,
    Bc3Unorm = DXGI_FORMAT_DXGI_FORMAT_BC3_UNORM,
    Bc3UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC3_UNORM_SRGB,
    Bc4Typeless = DXGI_FORMAT_DXGI_FORMAT_BC4_TYPELESS,
    Bc4Unorm = DXGI_FORMAT_DXGI_FORMAT_BC4_UNORM,
    Bc4Snorm = DXGI_FORMAT_DXGI_FORMAT_BC4_SNORM,
    Bc5Typeless = DXGI_FORMAT_DXGI_FORMAT_BC5_TYPELESS,
    Bc5Unorm = DXGI_FORMAT_DXGI_FORMAT_BC5_UNORM,
    Bc5Snorm = DXGI_FORMAT_DXGI_FORMAT_BC5_SNORM,
    B5G6R5Unorm = DXGI_FORMAT_DXGI_FORMAT_B5G6R5_UNORM,
    B5G5R5A1Unorm = DXGI_FORMAT_DXGI_FORMAT_B5G5R5A1_UNORM,
    B8G8R8A8Unorm = DXGI_FORMAT_DXGI_FORMAT_B8G8R8A8_UNORM,
    B8G8R8X8Unorm = DXGI_FORMAT_DXGI_FORMAT_B8G8R8X8_UNORM,
    R10G10B10XrBiasA2Unorm = DXGI_FORMAT_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
    B8G8R8A8Typeless = DXGI_FORMAT_DXGI_FORMAT_B8G8R8A8_TYPELESS,
    B8G8R8A8UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
    B8G8R8X8Typeless = DXGI_FORMAT_DXGI_FORMAT_B8G8R8X8_TYPELESS,
    B8G8R8X8UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
    Bc6HTypeless = DXGI_FORMAT_DXGI_FORMAT_BC6H_TYPELESS,
    Bc6HUf16 = DXGI_FORMAT_DXGI_FORMAT_BC6H_UF16,
    Bc6HSf16 = DXGI_FORMAT_DXGI_FORMAT_BC6H_SF16,
    Bc7Typeless = DXGI_FORMAT_DXGI_FORMAT_BC7_TYPELESS,
    Bc7Unorm = DXGI_FORMAT_DXGI_FORMAT_BC7_UNORM,
    Bc7UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC7_UNORM_SRGB,
    Ayuv = DXGI_FORMAT_DXGI_FORMAT_AYUV,
    Y410 = DXGI_FORMAT_DXGI_FORMAT_Y410,
    Y416 = DXGI_FORMAT_DXGI_FORMAT_Y416,
    Nv12 = DXGI_FORMAT_DXGI_FORMAT_NV12,
    P010 = DXGI_FORMAT_DXGI_FORMAT_P010,
    P016 = DXGI_FORMAT_DXGI_FORMAT_P016,
    F420Opaque = DXGI_FORMAT_DXGI_FORMAT_420_OPAQUE,
    Yuy2 = DXGI_FORMAT_DXGI_FORMAT_YUY2,
    Y210 = DXGI_FORMAT_DXGI_FORMAT_Y210,
    Y216 = DXGI_FORMAT_DXGI_FORMAT_Y216,
    Nv11 = DXGI_FORMAT_DXGI_FORMAT_NV11,
    Ai44 = DXGI_FORMAT_DXGI_FORMAT_AI44,
    Ia44 = DXGI_FORMAT_DXGI_FORMAT_IA44,
    P8 = DXGI_FORMAT_DXGI_FORMAT_P8,
    A8P8 = DXGI_FORMAT_DXGI_FORMAT_A8P8,
    B4G4R4A4Unorm = DXGI_FORMAT_DXGI_FORMAT_B4G4R4A4_UNORM,
    P208 = DXGI_FORMAT_DXGI_FORMAT_P208,
    V208 = DXGI_FORMAT_DXGI_FORMAT_V208,
    V408 = DXGI_FORMAT_DXGI_FORMAT_V408,
    SamplerFeedbackMinMipOpaque =
        DXGI_FORMAT_DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
    SamplerFeedbackMipRegionUsedOpaque =
        DXGI_FORMAT_DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
    ForceUint = DXGI_FORMAT_DXGI_FORMAT_FORCE_UINT,
}

impl Format {
    pub fn get_size(self) -> ByteCount {
        match self {
            Self::R16Uint => ByteCount(2),
            Self::R32Uint => ByteCount(4),
            _ => unimplemented!(),
        }
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum DescriptorRangeType {
    Srv = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_SRV,
    Uav = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_UAV,
    Cbv = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_CBV,
    Sampler = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER,
}

bitflags! {
    pub struct DescriptorRangeFlags: i32 {
        const DescriptorsVolatile = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE;
        const DataVolatile = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE;
        const DataStaticWhileSetAtExecute = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE;
        const DataStatic = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC;
        const DescriptorsStaticKeepingBufferBoundsChecks = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS;
    }
}
