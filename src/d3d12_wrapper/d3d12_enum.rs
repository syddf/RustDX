#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

use crate::raw_bindings::d3d12::*;
use bitflags::bitflags;
use crate::d3d12_common::ByteCount;

bitflags! {
    pub struct FenceFlags: i32 {
        const None = D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_NONE;
        const Shared =
        D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_SHARED;
        const CrossAdapter =
        D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER;
        const NonMonitored =
        D3D12_FENCE_FLAGS_D3D12_FENCE_FLAG_NON_MONITORED;
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum Filter {
    MinMagMipPoint = D3D12_FILTER_D3D12_FILTER_MIN_MAG_MIP_POINT,
    MinMagPointMipLinear = D3D12_FILTER_D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR,
    MinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
    MinPointMagMipLinear = D3D12_FILTER_D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR,
    MinLinearMagMipPoint = D3D12_FILTER_D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
    MinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    MinMagLinearMipPoint = D3D12_FILTER_D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
    MinMagMipLinear = D3D12_FILTER_D3D12_FILTER_MIN_MAG_MIP_LINEAR,
    Anisotropic = D3D12_FILTER_D3D12_FILTER_ANISOTROPIC,
    ComparisonMinMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
    ComparisonMinMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
    ComparisonMinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
    ComparisonMinPointMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
    ComparisonMinLinearMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
    ComparisonMinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    ComparisonMinMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
    ComparisonMinMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
    ComparisonAnisotropic = D3D12_FILTER_D3D12_FILTER_COMPARISON_ANISOTROPIC,
    MinimumMinMagMipPoint = D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT,
    MinimumMinMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR,
    MinimumMinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
    MinimumMinPointMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR,
    MinimumMinLinearMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT,
    MinimumMinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    MinimumMinMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT,
    MinimumMinMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR,
    MinimumAnisotropic = D3D12_FILTER_D3D12_FILTER_MINIMUM_ANISOTROPIC,
    MaximumMinMagMipPoint = D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT,
    MaximumMinMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,
    MaximumMinPointMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
    MaximumMinPointMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,
    MaximumMinLinearMagMipPoint =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,
    MaximumMinLinearMagPointMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
    MaximumMinMagLinearMipPoint =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,
    MaximumMinMagMipLinear =
        D3D12_FILTER_D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR,
    MaximumAnisotropic = D3D12_FILTER_D3D12_FILTER_MAXIMUM_ANISOTROPIC,
}


#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum TextureAddressMode {
    Wrap = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_WRAP,
    Mirror = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_MIRROR,
    Clamp = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_CLAMP,
    Border = D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_BORDER,
    MirrorOnce =
        D3D12_TEXTURE_ADDRESS_MODE_D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum ComparisonFunc {
    Never = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_NEVER,
    Less = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_LESS,
    Equal = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_EQUAL,
    LessEqual = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_LESS_EQUAL,
    Greater = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_GREATER,
    NotEqual = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_NOT_EQUAL,
    GreaterEqual = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_GREATER_EQUAL,
    Always = D3D12_COMPARISON_FUNC_D3D12_COMPARISON_FUNC_ALWAYS,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum StaticBorderColor {
    TransparentBlack =
        D3D12_STATIC_BORDER_COLOR_D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK,
    OpaqueBlack =
        D3D12_STATIC_BORDER_COLOR_D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK,
    OpaqueWhite =
        D3D12_STATIC_BORDER_COLOR_D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum ShaderVisibility {
    All = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_ALL,
    Vertex = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_VERTEX,
    Hull = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_HULL,
    Domain = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_DOMAIN,
    Geometry = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_GEOMETRY,
    Pixel = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_PIXEL,
    Amplification =
        D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_AMPLIFICATION,
    Mesh = D3D12_SHADER_VISIBILITY_D3D12_SHADER_VISIBILITY_MESH,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum InputClassification {
    PerVertex =
        D3D12_INPUT_CLASSIFICATION_D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA,
    PerInstance =
        D3D12_INPUT_CLASSIFICATION_D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA,
}


#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum RootParameterType {
    DescriptorTable =
        D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE,
    T32BitConstants =
        D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS,
    Cbv = D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_CBV,
    Srv = D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_SRV,
    Uav = D3D12_ROOT_PARAMETER_TYPE_D3D12_ROOT_PARAMETER_TYPE_UAV,
}

bitflags! {
    pub struct RootDescriptorFlags: i32 {
        const DataVolatile = D3D12_ROOT_DESCRIPTOR_FLAGS_D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE;
        const DataStaticWhileSetAtExecute = D3D12_ROOT_DESCRIPTOR_FLAGS_D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE;
        const DataStatic = D3D12_ROOT_DESCRIPTOR_FLAGS_D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC;
    }
}

bitflags! {
    pub struct RootSignatureFlags: i32 {
        const None = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_NONE;
        const AllowInputAssemblerInputLayout = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;
        const DenyVertexShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS;
        const DenyHullShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS;
        const DenyDomainShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS;
        const DenyGeometryShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS;
        const DenyPixelShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS;
        const AllowStreamOutput = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT;
        const LocalRootSignature = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE;
        const DenyAmplificationShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS;
        const DenyMeshShaderRootAccess = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS;
        const CbvSrvUavHeapDirectlyIndexed = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_CBV_SRV_UAV_HEAP_DIRECTLY_INDEXED;
        const SamplerHeapDirectlyIndexed = D3D12_ROOT_SIGNATURE_FLAGS_D3D12_ROOT_SIGNATURE_FLAG_SAMPLER_HEAP_DIRECTLY_INDEXED;
    }
}

#[repr(i32)]
#[derive(Debug, Copy, Clone)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum Format {
    Unknown = DXGI_FORMAT_DXGI_FORMAT_UNKNOWN,
    R32G32B32A32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_TYPELESS,
    R32G32B32A32Float = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_FLOAT,
    R32G32B32A32Uint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_UINT,
    R32G32B32A32Sint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32A32_SINT,
    R32G32B32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_TYPELESS,
    R32G32B32Float = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_FLOAT,
    R32G32B32Uint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_UINT,
    R32G32B32Sint = DXGI_FORMAT_DXGI_FORMAT_R32G32B32_SINT,
    R16G16B16A16Typeless = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_TYPELESS,
    R16G16B16A16Float = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_FLOAT,
    R16G16B16A16Unorm = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_UNORM,
    R16G16B16A16Uint = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_UINT,
    R16G16B16A16Snorm = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_SNORM,
    R16G16B16A16Sint = DXGI_FORMAT_DXGI_FORMAT_R16G16B16A16_SINT,
    R32G32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G32_TYPELESS,
    R32G32Float = DXGI_FORMAT_DXGI_FORMAT_R32G32_FLOAT,
    R32G32Uint = DXGI_FORMAT_DXGI_FORMAT_R32G32_UINT,
    R32G32Sint = DXGI_FORMAT_DXGI_FORMAT_R32G32_SINT,
    R32G8X24Typeless = DXGI_FORMAT_DXGI_FORMAT_R32G8X24_TYPELESS,
    D32FloatS8X24Uint = DXGI_FORMAT_DXGI_FORMAT_D32_FLOAT_S8X24_UINT,
    R32FloatX8X24Typeless = DXGI_FORMAT_DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,
    X32TypelessG8X24Uint = DXGI_FORMAT_DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,
    R10G10B10A2Typeless = DXGI_FORMAT_DXGI_FORMAT_R10G10B10A2_TYPELESS,
    R10G10B10A2Unorm = DXGI_FORMAT_DXGI_FORMAT_R10G10B10A2_UNORM,
    R10G10B10A2Uint = DXGI_FORMAT_DXGI_FORMAT_R10G10B10A2_UINT,
    R11G11B10Float = DXGI_FORMAT_DXGI_FORMAT_R11G11B10_FLOAT,
    R8G8B8A8Typeless = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_TYPELESS,
    R8G8B8A8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_UNORM,
    R8G8B8A8UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,
    R8G8B8A8Uint = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_UINT,
    R8G8B8A8Snorm = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_SNORM,
    R8G8B8A8Sint = DXGI_FORMAT_DXGI_FORMAT_R8G8B8A8_SINT,
    R16G16Typeless = DXGI_FORMAT_DXGI_FORMAT_R16G16_TYPELESS,
    R16G16Float = DXGI_FORMAT_DXGI_FORMAT_R16G16_FLOAT,
    R16G16Unorm = DXGI_FORMAT_DXGI_FORMAT_R16G16_UNORM,
    R16G16Uint = DXGI_FORMAT_DXGI_FORMAT_R16G16_UINT,
    R16G16Snorm = DXGI_FORMAT_DXGI_FORMAT_R16G16_SNORM,
    R16G16Sint = DXGI_FORMAT_DXGI_FORMAT_R16G16_SINT,
    R32Typeless = DXGI_FORMAT_DXGI_FORMAT_R32_TYPELESS,
    D32Float = DXGI_FORMAT_DXGI_FORMAT_D32_FLOAT,
    R32Float = DXGI_FORMAT_DXGI_FORMAT_R32_FLOAT,
    R32Uint = DXGI_FORMAT_DXGI_FORMAT_R32_UINT,
    R32Sint = DXGI_FORMAT_DXGI_FORMAT_R32_SINT,
    R24G8Typeless = DXGI_FORMAT_DXGI_FORMAT_R24G8_TYPELESS,
    D24UnormS8Uint = DXGI_FORMAT_DXGI_FORMAT_D24_UNORM_S8_UINT,
    R24UnormX8Typeless = DXGI_FORMAT_DXGI_FORMAT_R24_UNORM_X8_TYPELESS,
    X24TypelessG8Uint = DXGI_FORMAT_DXGI_FORMAT_X24_TYPELESS_G8_UINT,
    R8G8Typeless = DXGI_FORMAT_DXGI_FORMAT_R8G8_TYPELESS,
    R8G8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8G8_UNORM,
    R8G8Uint = DXGI_FORMAT_DXGI_FORMAT_R8G8_UINT,
    R8G8Snorm = DXGI_FORMAT_DXGI_FORMAT_R8G8_SNORM,
    R8G8Sint = DXGI_FORMAT_DXGI_FORMAT_R8G8_SINT,
    R16Typeless = DXGI_FORMAT_DXGI_FORMAT_R16_TYPELESS,
    R16Float = DXGI_FORMAT_DXGI_FORMAT_R16_FLOAT,
    D16Unorm = DXGI_FORMAT_DXGI_FORMAT_D16_UNORM,
    R16Unorm = DXGI_FORMAT_DXGI_FORMAT_R16_UNORM,
    R16Uint = DXGI_FORMAT_DXGI_FORMAT_R16_UINT,
    R16Snorm = DXGI_FORMAT_DXGI_FORMAT_R16_SNORM,
    R16Sint = DXGI_FORMAT_DXGI_FORMAT_R16_SINT,
    R8Typeless = DXGI_FORMAT_DXGI_FORMAT_R8_TYPELESS,
    R8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8_UNORM,
    R8Uint = DXGI_FORMAT_DXGI_FORMAT_R8_UINT,
    R8Snorm = DXGI_FORMAT_DXGI_FORMAT_R8_SNORM,
    R8Sint = DXGI_FORMAT_DXGI_FORMAT_R8_SINT,
    A8Unorm = DXGI_FORMAT_DXGI_FORMAT_A8_UNORM,
    R1Unorm = DXGI_FORMAT_DXGI_FORMAT_R1_UNORM,
    R9G9B9E5Sharedexp = DXGI_FORMAT_DXGI_FORMAT_R9G9B9E5_SHAREDEXP,
    R8G8B8G8Unorm = DXGI_FORMAT_DXGI_FORMAT_R8G8_B8G8_UNORM,
    G8R8G8B8Unorm = DXGI_FORMAT_DXGI_FORMAT_G8R8_G8B8_UNORM,
    Bc1Typeless = DXGI_FORMAT_DXGI_FORMAT_BC1_TYPELESS,
    Bc1Unorm = DXGI_FORMAT_DXGI_FORMAT_BC1_UNORM,
    Bc1UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC1_UNORM_SRGB,
    Bc2Typeless = DXGI_FORMAT_DXGI_FORMAT_BC2_TYPELESS,
    Bc2Unorm = DXGI_FORMAT_DXGI_FORMAT_BC2_UNORM,
    Bc2UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC2_UNORM_SRGB,
    Bc3Typeless = DXGI_FORMAT_DXGI_FORMAT_BC3_TYPELESS,
    Bc3Unorm = DXGI_FORMAT_DXGI_FORMAT_BC3_UNORM,
    Bc3UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC3_UNORM_SRGB,
    Bc4Typeless = DXGI_FORMAT_DXGI_FORMAT_BC4_TYPELESS,
    Bc4Unorm = DXGI_FORMAT_DXGI_FORMAT_BC4_UNORM,
    Bc4Snorm = DXGI_FORMAT_DXGI_FORMAT_BC4_SNORM,
    Bc5Typeless = DXGI_FORMAT_DXGI_FORMAT_BC5_TYPELESS,
    Bc5Unorm = DXGI_FORMAT_DXGI_FORMAT_BC5_UNORM,
    Bc5Snorm = DXGI_FORMAT_DXGI_FORMAT_BC5_SNORM,
    B5G6R5Unorm = DXGI_FORMAT_DXGI_FORMAT_B5G6R5_UNORM,
    B5G5R5A1Unorm = DXGI_FORMAT_DXGI_FORMAT_B5G5R5A1_UNORM,
    B8G8R8A8Unorm = DXGI_FORMAT_DXGI_FORMAT_B8G8R8A8_UNORM,
    B8G8R8X8Unorm = DXGI_FORMAT_DXGI_FORMAT_B8G8R8X8_UNORM,
    R10G10B10XrBiasA2Unorm = DXGI_FORMAT_DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,
    B8G8R8A8Typeless = DXGI_FORMAT_DXGI_FORMAT_B8G8R8A8_TYPELESS,
    B8G8R8A8UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,
    B8G8R8X8Typeless = DXGI_FORMAT_DXGI_FORMAT_B8G8R8X8_TYPELESS,
    B8G8R8X8UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,
    Bc6HTypeless = DXGI_FORMAT_DXGI_FORMAT_BC6H_TYPELESS,
    Bc6HUf16 = DXGI_FORMAT_DXGI_FORMAT_BC6H_UF16,
    Bc6HSf16 = DXGI_FORMAT_DXGI_FORMAT_BC6H_SF16,
    Bc7Typeless = DXGI_FORMAT_DXGI_FORMAT_BC7_TYPELESS,
    Bc7Unorm = DXGI_FORMAT_DXGI_FORMAT_BC7_UNORM,
    Bc7UnormSrgb = DXGI_FORMAT_DXGI_FORMAT_BC7_UNORM_SRGB,
    Ayuv = DXGI_FORMAT_DXGI_FORMAT_AYUV,
    Y410 = DXGI_FORMAT_DXGI_FORMAT_Y410,
    Y416 = DXGI_FORMAT_DXGI_FORMAT_Y416,
    Nv12 = DXGI_FORMAT_DXGI_FORMAT_NV12,
    P010 = DXGI_FORMAT_DXGI_FORMAT_P010,
    P016 = DXGI_FORMAT_DXGI_FORMAT_P016,
    F420Opaque = DXGI_FORMAT_DXGI_FORMAT_420_OPAQUE,
    Yuy2 = DXGI_FORMAT_DXGI_FORMAT_YUY2,
    Y210 = DXGI_FORMAT_DXGI_FORMAT_Y210,
    Y216 = DXGI_FORMAT_DXGI_FORMAT_Y216,
    Nv11 = DXGI_FORMAT_DXGI_FORMAT_NV11,
    Ai44 = DXGI_FORMAT_DXGI_FORMAT_AI44,
    Ia44 = DXGI_FORMAT_DXGI_FORMAT_IA44,
    P8 = DXGI_FORMAT_DXGI_FORMAT_P8,
    A8P8 = DXGI_FORMAT_DXGI_FORMAT_A8P8,
    B4G4R4A4Unorm = DXGI_FORMAT_DXGI_FORMAT_B4G4R4A4_UNORM,
    P208 = DXGI_FORMAT_DXGI_FORMAT_P208,
    V208 = DXGI_FORMAT_DXGI_FORMAT_V208,
    V408 = DXGI_FORMAT_DXGI_FORMAT_V408,
    SamplerFeedbackMinMipOpaque =
        DXGI_FORMAT_DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
    SamplerFeedbackMipRegionUsedOpaque =
        DXGI_FORMAT_DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
    ForceUint = DXGI_FORMAT_DXGI_FORMAT_FORCE_UINT,
}

impl Format {
    pub fn get_size(self) -> ByteCount {
        match self {
            Self::R16Uint => ByteCount(2),
            Self::R32Uint => ByteCount(4),
            _ => unimplemented!(),
        }
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum DescriptorRangeType {
    Srv = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_SRV,
    Uav = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_UAV,
    Cbv = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_CBV,
    Sampler = D3D12_DESCRIPTOR_RANGE_TYPE_D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER,
}

bitflags! {
    pub struct DescriptorRangeFlags: i32 {
        const DescriptorsVolatile = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE;
        const DataVolatile = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE;
        const DataStaticWhileSetAtExecute = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE;
        const DataStatic = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC;
        const DescriptorsStaticKeepingBufferBoundsChecks = D3D12_DESCRIPTOR_RANGE_FLAGS_D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS;
    }
}

#[repr(i32)]
#[derive(Debug, Copy, Clone)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum Feature {
    D3D12Options = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS,
    Architecture = D3D12_FEATURE_D3D12_FEATURE_ARCHITECTURE,
    FeatureLevels = D3D12_FEATURE_D3D12_FEATURE_FEATURE_LEVELS,
    FormatSupport = D3D12_FEATURE_D3D12_FEATURE_FORMAT_SUPPORT,
    MultisampleQualityLevels =
        D3D12_FEATURE_D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS,
    FormatInfo = D3D12_FEATURE_D3D12_FEATURE_FORMAT_INFO,
    GpuVirtualAddressSupport =
        D3D12_FEATURE_D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT,
    ShaderModel = D3D12_FEATURE_D3D12_FEATURE_SHADER_MODEL,
    D3D12Options1 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS1,
    ProtectedResourceSessionSupport =
        D3D12_FEATURE_D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT,
    RootSignature = D3D12_FEATURE_D3D12_FEATURE_ROOT_SIGNATURE,
    Architecture1 = D3D12_FEATURE_D3D12_FEATURE_ARCHITECTURE1,
    D3D12Options2 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS2,
    ShaderCache = D3D12_FEATURE_D3D12_FEATURE_SHADER_CACHE,
    CommandQueuePriority = D3D12_FEATURE_D3D12_FEATURE_COMMAND_QUEUE_PRIORITY,
    D3D12Options3 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS3,
    ExistingHeaps = D3D12_FEATURE_D3D12_FEATURE_EXISTING_HEAPS,
    D3D12Options4 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS4,
    Serialization = D3D12_FEATURE_D3D12_FEATURE_SERIALIZATION,
    CrossNode = D3D12_FEATURE_D3D12_FEATURE_CROSS_NODE,
    D3D12Options5 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS5,
    Displayable = D3D12_FEATURE_D3D12_FEATURE_DISPLAYABLE,
    D3D12Options6 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS6,
    QueryMetaCommand = D3D12_FEATURE_D3D12_FEATURE_QUERY_META_COMMAND,
    D3D12Options7 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS7,
    ProtectedResourceSessionTypeCount =
        D3D12_FEATURE_D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT,
    ProtectedResourceSessionTypes =
        D3D12_FEATURE_D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES,
    D3D12Options8 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS8,
    D3D12Options9 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS9,
    D3D12Options10 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS10,
    D3D12Options11 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS11,
    D3D12Options12 = D3D12_FEATURE_D3D12_FEATURE_D3D12_OPTIONS12,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum CommandListType {
    Direct = D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_DIRECT,
    Bundle = D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_BUNDLE,
    Compute = D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_COMPUTE,
    Copy = D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_COPY,
    VideoDecode = D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE,
    VideoProcess =
        D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS,
    VideoEncode = D3D12_COMMAND_LIST_TYPE_D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE,
}

#[repr(i32)]
#[derive(Copy, Clone, Debug)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum QueryType {
    Occlusion = D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_OCCLUSION,
    BinaryOcclusion = D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_BINARY_OCCLUSION,
    Timestamp = D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_TIMESTAMP,
    PipelineStatistics = D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_PIPELINE_STATISTICS,
    SoStatisticsStream0 =
        D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0,
    SoStatisticsStream1 =
        D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1,
    SoStatisticsStream2 =
        D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2,
    SoStatisticsStream3 =
        D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3,
    VideoDecodeStatistics =
        D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS,
    PipelineStatistics1 =
        D3D12_QUERY_TYPE_D3D12_QUERY_TYPE_PIPELINE_STATISTICS1,
}

bitflags! {
    pub struct ClearFlags: i32 {
        const Depth = D3D12_CLEAR_FLAGS_D3D12_CLEAR_FLAG_DEPTH;
        const Stencil = D3D12_CLEAR_FLAGS_D3D12_CLEAR_FLAG_STENCIL;
    }
}

pub fn cast_to_ppv<T>(pointer: &mut *mut T) -> *mut *mut std::ffi::c_void {
    pointer as *mut *mut T as *mut *mut std::ffi::c_void
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum ResourceDimension {
    Unknown = D3D12_RESOURCE_DIMENSION_D3D12_RESOURCE_DIMENSION_UNKNOWN,
    Buffer = D3D12_RESOURCE_DIMENSION_D3D12_RESOURCE_DIMENSION_BUFFER,
    Texture1D = D3D12_RESOURCE_DIMENSION_D3D12_RESOURCE_DIMENSION_TEXTURE1D,
    Texture2D = D3D12_RESOURCE_DIMENSION_D3D12_RESOURCE_DIMENSION_TEXTURE2D,
    Texture3D = D3D12_RESOURCE_DIMENSION_D3D12_RESOURCE_DIMENSION_TEXTURE3D,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum TextureCopyType {
    SubresourceIndex =
        D3D12_TEXTURE_COPY_TYPE_D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX,
    PlacedFootprint =
        D3D12_TEXTURE_COPY_TYPE_D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT,
}

bitflags! {
    pub struct ResourceFlags: i32 {
        const None = D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_NONE;
        const AllowRenderTarget =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET;
        const AllowDepthStencil =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL;
        const AllowUnorderedAccess =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS;
        const DenyShaderResource =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE;
        const AllowCrossAdapter =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER;
        const AllowSimultaneousAccess =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS;
        const VideoDecodeReferenceOnly =
            D3D12_RESOURCE_FLAGS_D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY;
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum ResourceBarrierType {
    Transition =
        D3D12_RESOURCE_BARRIER_TYPE_D3D12_RESOURCE_BARRIER_TYPE_TRANSITION,
    Aliasing = D3D12_RESOURCE_BARRIER_TYPE_D3D12_RESOURCE_BARRIER_TYPE_ALIASING,
    Uav = D3D12_RESOURCE_BARRIER_TYPE_D3D12_RESOURCE_BARRIER_TYPE_UAV,
}

bitflags! {
    pub struct ResourceBarrierFlags: i32 {
        const None = D3D12_RESOURCE_BARRIER_FLAGS_D3D12_RESOURCE_BARRIER_FLAG_NONE;
        const BeginOnly = D3D12_RESOURCE_BARRIER_FLAGS_D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY;
        const EndOnly = D3D12_RESOURCE_BARRIER_FLAGS_D3D12_RESOURCE_BARRIER_FLAG_END_ONLY;
    }
}

#[repr(i32)]
#[derive(Debug, Copy, Clone)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum PrimitiveTopology {
    Undefined = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED,
    PointList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_POINTLIST,
    LineList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_LINELIST,
    LineStrip = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP,
    TriangleList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
    TriangleStrip =
        D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
    LineListAdj = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
    LineStripAdj =
        D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
    TriangleListAdj =
        D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
    TriangleStripAdj =
        D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
    P1ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
    P2ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
    P3ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
    P4ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
    P5ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
    P6ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
    P7ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
    P8ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
    P9ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
    P10ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
    P11ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
    P12ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
    P13ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
    P14ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
    P15ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
    P16ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
    P17ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
    P18ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
    P19ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
    P20ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
    P21ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
    P22ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
    P23ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
    P24ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
    P25ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
    P26ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
    P27ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
    P28ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
    P29ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
    P30ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
    P31ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
    P32ControlPointPatchList = D3D_PRIMITIVE_TOPOLOGY_D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum IndexBufferStripCutValue {
    Disabled = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED,
    I16Bits = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF,
    I32Bits = D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum PrimitiveTopologyType {
    Undefined =
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED,
    Point = D3D12_PRIMITIVE_TOPOLOGY_TYPE_D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT,
    Line = D3D12_PRIMITIVE_TOPOLOGY_TYPE_D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE,
    Triangle =
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE,
    Patch = D3D12_PRIMITIVE_TOPOLOGY_TYPE_D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH,
}

bitflags! {
    pub struct ResourceStates: i32 {
        const Common = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_COMMON;
        const VertexAndConstantBuffer = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER;
        const IndexBuffer = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_INDEX_BUFFER;
        const RenderTarget = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_RENDER_TARGET;
        const UnorderedAccess = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_UNORDERED_ACCESS;
        const DepthWrite = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_DEPTH_WRITE;
        const DepthRead = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_DEPTH_READ;
        const NonPixelShaderResource = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE;
        const PixelShaderResource = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE;
        const StreamOut = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_STREAM_OUT;
        const IndirectArgument = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT;
        const CopyDest = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_COPY_DEST;
        const CopySource = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_COPY_SOURCE;
        const ResolveDest = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_RESOLVE_DEST;
        const ResolveSource = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_RESOLVE_SOURCE;
        const RaytracingAccelerationStructure = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE;
        const ShadingRateSource = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE;
        const GenericRead = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_GENERIC_READ;
        const AllShaderResource = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_ALL_SHADER_RESOURCE;
        const Present = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_PRESENT;
        const Predication = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_PREDICATION;
        const VideoDecodeRead = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VIDEO_DECODE_READ;
        const VideoDecodeWrite = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE;
        const VideoProcessRead = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ;
        const VideoProcessWrite = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE;
        const VideoEncodeRead = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ;
        const VideoEncodeWrite = D3D12_RESOURCE_STATES_D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE;
    }
}


bitflags! {
    pub struct HeapFlags: i32 {
        const None = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_NONE;
        const Shared = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_SHARED;
        const DenyBuffers = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_DENY_BUFFERS;
        const AllowDisplay = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_DISPLAY;
        const SharedCrossAdapter = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER;
        const DenyRtDsTextures = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES;
        const DenyNonRtDsTextures = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES;
        const HardwareProtected = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_HARDWARE_PROTECTED;
        const AllowWriteWatch = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH;
        const AllowShaderAtomics = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS;
        const CreateNotResident = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT;
        const CreateNotZeroed = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_CREATE_NOT_ZEROED;
        const AllowAllBuffersAndTextures = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES;
        const AllowOnlyBuffers = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS;
        const AllowOnlyNonRtDsTextures = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES;
        const AllowOnlyRtDsTextures = D3D12_HEAP_FLAGS_D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES;
    }
}

#[repr(i32)]
#[derive(Debug, Copy, Clone)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum DescriptorHeapType {
    CbvSrvUav =
        D3D12_DESCRIPTOR_HEAP_TYPE_D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV,
    Sampler = D3D12_DESCRIPTOR_HEAP_TYPE_D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER,
    Rtv = D3D12_DESCRIPTOR_HEAP_TYPE_D3D12_DESCRIPTOR_HEAP_TYPE_RTV,
    Dsv = D3D12_DESCRIPTOR_HEAP_TYPE_D3D12_DESCRIPTOR_HEAP_TYPE_DSV,
    NumTypes = D3D12_DESCRIPTOR_HEAP_TYPE_D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES,
}

bitflags! {
    pub struct DescriptorHeapFlags: i32 {
        const None = D3D12_DESCRIPTOR_HEAP_FLAGS_D3D12_DESCRIPTOR_HEAP_FLAG_NONE;
        const ShaderVisible = D3D12_DESCRIPTOR_HEAP_FLAGS_D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum MessageSeverity {
    Corruption = D3D12_MESSAGE_SEVERITY_D3D12_MESSAGE_SEVERITY_CORRUPTION,
    Error = D3D12_MESSAGE_SEVERITY_D3D12_MESSAGE_SEVERITY_ERROR,
    Warning = D3D12_MESSAGE_SEVERITY_D3D12_MESSAGE_SEVERITY_WARNING,
    Info = D3D12_MESSAGE_SEVERITY_D3D12_MESSAGE_SEVERITY_INFO,
    Message = D3D12_MESSAGE_SEVERITY_D3D12_MESSAGE_SEVERITY_MESSAGE,
}

bitflags! {
    pub struct CreateFactoryFlags: u32 {
        const None = 0; // ToDo: Is there any constant for it?
        const Debug = DXGI_CREATE_FACTORY_DEBUG;
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum GpuPreference {
    Unspecified = DXGI_GPU_PREFERENCE_DXGI_GPU_PREFERENCE_UNSPECIFIED,
    MinimumPower = DXGI_GPU_PREFERENCE_DXGI_GPU_PREFERENCE_MINIMUM_POWER,
    HighPerformance = DXGI_GPU_PREFERENCE_DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE,
}

bitflags! {
    pub struct MakeWindowAssociationFlags: u32 {
        const NoWindowChanges = DXGI_MWA_NO_WINDOW_CHANGES;
        const NoAltEnter = DXGI_MWA_NO_ALT_ENTER;
        const NoPrintScreen = DXGI_MWA_NO_PRINT_SCREEN;
        const Valid = DXGI_MWA_VALID;
    }
}

bitflags! {
    pub struct PresentFlags: u32 {
        const None = 0;
        const Test = DXGI_PRESENT_TEST;
        const DoNotSequence = DXGI_PRESENT_DO_NOT_SEQUENCE;
        const Restart = DXGI_PRESENT_RESTART;
        const DoNotWait = DXGI_PRESENT_DO_NOT_WAIT;
        const StereoPreferRight = DXGI_PRESENT_STEREO_PREFER_RIGHT;
        const StereoTemporaryMono = DXGI_PRESENT_STEREO_TEMPORARY_MONO;
        const RestrictToOutput = DXGI_PRESENT_RESTRICT_TO_OUTPUT;
        const UseDuration = DXGI_PRESENT_USE_DURATION;
        const AllowTearing = DXGI_PRESENT_ALLOW_TEARING;
    }
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum HeapType {
    Default = D3D12_HEAP_TYPE_D3D12_HEAP_TYPE_DEFAULT,
    Upload = D3D12_HEAP_TYPE_D3D12_HEAP_TYPE_UPLOAD,
    Readback = D3D12_HEAP_TYPE_D3D12_HEAP_TYPE_READBACK,
    Custom = D3D12_HEAP_TYPE_D3D12_HEAP_TYPE_CUSTOM,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum Blend {
    Zero = D3D12_BLEND_D3D12_BLEND_ZERO,
    One = D3D12_BLEND_D3D12_BLEND_ONE,
    Color = D3D12_BLEND_D3D12_BLEND_SRC_COLOR,
    InvSrcColor = D3D12_BLEND_D3D12_BLEND_INV_SRC_COLOR,
    SrcAlpha = D3D12_BLEND_D3D12_BLEND_SRC_ALPHA,
    InvSrcAlpha = D3D12_BLEND_D3D12_BLEND_INV_SRC_ALPHA,
    DestAlpha = D3D12_BLEND_D3D12_BLEND_DEST_ALPHA,
    InvDestAlpha = D3D12_BLEND_D3D12_BLEND_INV_DEST_ALPHA,
    BlendDestColor = D3D12_BLEND_D3D12_BLEND_DEST_COLOR,
    BlendInvDestColor = D3D12_BLEND_D3D12_BLEND_INV_DEST_COLOR,
    SrvAlphaSat = D3D12_BLEND_D3D12_BLEND_SRC_ALPHA_SAT,
    BlendFactor = D3D12_BLEND_D3D12_BLEND_BLEND_FACTOR,
    InvBlendFactor = D3D12_BLEND_D3D12_BLEND_INV_BLEND_FACTOR,
    Src1Color = D3D12_BLEND_D3D12_BLEND_SRC1_COLOR,
    InvSrc1Color = D3D12_BLEND_D3D12_BLEND_INV_SRC1_COLOR,
    Src1Alpha = D3D12_BLEND_D3D12_BLEND_SRC1_ALPHA,
    InvSrc1Alpha = D3D12_BLEND_D3D12_BLEND_INV_SRC1_ALPHA,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum FillMode {
    Wireframe = D3D12_FILL_MODE_D3D12_FILL_MODE_WIREFRAME,
    Solid = D3D12_FILL_MODE_D3D12_FILL_MODE_SOLID,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum CullMode {
    None = D3D12_CULL_MODE_D3D12_CULL_MODE_NONE,
    Front = D3D12_CULL_MODE_D3D12_CULL_MODE_FRONT,
    Back = D3D12_CULL_MODE_D3D12_CULL_MODE_BACK,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum BlendOp {
    Add = D3D12_BLEND_OP_D3D12_BLEND_OP_ADD,
    Subtract = D3D12_BLEND_OP_D3D12_BLEND_OP_SUBTRACT,
    RevSubtract = D3D12_BLEND_OP_D3D12_BLEND_OP_REV_SUBTRACT,
    Min = D3D12_BLEND_OP_D3D12_BLEND_OP_MIN,
    Max = D3D12_BLEND_OP_D3D12_BLEND_OP_MAX,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum LogicOp {
    Clear = D3D12_LOGIC_OP_D3D12_LOGIC_OP_CLEAR,
    Set = D3D12_LOGIC_OP_D3D12_LOGIC_OP_SET,
    Copy = D3D12_LOGIC_OP_D3D12_LOGIC_OP_COPY,
    CopyInverted = D3D12_LOGIC_OP_D3D12_LOGIC_OP_COPY_INVERTED,
    NoOp = D3D12_LOGIC_OP_D3D12_LOGIC_OP_NOOP,
    Invert = D3D12_LOGIC_OP_D3D12_LOGIC_OP_INVERT,
    And = D3D12_LOGIC_OP_D3D12_LOGIC_OP_AND,
    NAnd = D3D12_LOGIC_OP_D3D12_LOGIC_OP_NAND,
    Or = D3D12_LOGIC_OP_D3D12_LOGIC_OP_OR,
    NOr = D3D12_LOGIC_OP_D3D12_LOGIC_OP_NOR,
    XOr = D3D12_LOGIC_OP_D3D12_LOGIC_OP_XOR,
    Equiv = D3D12_LOGIC_OP_D3D12_LOGIC_OP_EQUIV,
    AndReverse = D3D12_LOGIC_OP_D3D12_LOGIC_OP_AND_REVERSE,
    AndInverted = D3D12_LOGIC_OP_D3D12_LOGIC_OP_AND_INVERTED,
    OrReverse = D3D12_LOGIC_OP_D3D12_LOGIC_OP_OR_REVERSE,
    OrInverted = D3D12_LOGIC_OP_D3D12_LOGIC_OP_OR_INVERTED,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum DepthWriteMask {
    Zero = D3D12_DEPTH_WRITE_MASK_D3D12_DEPTH_WRITE_MASK_ZERO,
    All = D3D12_DEPTH_WRITE_MASK_D3D12_DEPTH_WRITE_MASK_ALL,
}

#[repr(i32)]
#[derive(Debug, Clone, Copy)]
#[cfg_attr(feature = "eq", derive(PartialEq, Eq))]
#[cfg_attr(feature = "hash", derive(Hash))]
pub enum StencilOp {
    Keep = D3D12_STENCIL_OP_D3D12_STENCIL_OP_KEEP,
    Zero = D3D12_STENCIL_OP_D3D12_STENCIL_OP_ZERO,
    Replace = D3D12_STENCIL_OP_D3D12_STENCIL_OP_REPLACE,
    IncrSat = D3D12_STENCIL_OP_D3D12_STENCIL_OP_INCR_SAT,
    DecrSat = D3D12_STENCIL_OP_D3D12_STENCIL_OP_DECR_SAT,
    Invert = D3D12_STENCIL_OP_D3D12_STENCIL_OP_INVERT,
    Incr = D3D12_STENCIL_OP_D3D12_STENCIL_OP_INCR,
    Dec = D3D12_STENCIL_OP_D3D12_STENCIL_OP_DECR,
}

bitflags! {
    pub struct PipelineStateFlags: i32 {
        const None = D3D12_PIPELINE_STATE_FLAGS_D3D12_PIPELINE_STATE_FLAG_NONE;
        const ToolDebug = D3D12_PIPELINE_STATE_FLAGS_D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG;
    }
}